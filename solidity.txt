pragma solidity ^0.5.6;

contract address_Contract{
   address private address_admit;
   
   function address_setter() public{
       address_admit=msg.sender;
   }
   
   function address_getter() public returns(address){
       return (address_admit);
   }
   
   modifier admit(){
       require(address_admit==msg.sender);
       _;
   }

}
//is address_contract
contract logic_Contract is address_Contract{
    data_Contract earN;
    //address_Contract add;
   // uint approval_count=0;
   
    constructor(address _dataAddress) public{
        setdataAdd(_dataAddress);
    }

    function setdataAdd(address _dataAddress) public{
        earN=data_Contract(_dataAddress);
    }
    

    function up_Price() public admit{
        earN.price_Up(msg.sender, earN.price_View(msg.sender)+ 1000);
    
    }
    
    function price_View() public view returns(uint){
        return earN.price_View(msg.sender);
    }

}

contract data_Contract {
    mapping (address => uint) public earNing;
    
    function price_Up(address _key, uint _value) public{
        earNing[_key]=_value;
    }
    
    function price_View(address _key) public view returns(uint){
        return earNing[_key]; 
        
    }
}
